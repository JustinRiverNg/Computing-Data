for (i in 1:3) {
print(vec[i] + 1)
}
vec <- c(3, 1, 4)
for (i in 1:3) {
print(vec[i] + 1)
}
abc <- c(1, 2, 3)
abc
abc
vec <- c(3, 1, 4)
for (i in 1:3) {
print(vec[i] + 1)
}
for (i in seq_along(vec)) {
print(vec[i] * 3)
}
vec <- c(3, 1, 4)
vec2 <- rep(0, length(vec))
for (i in seq_along(vec)) {
vec2[i] <- vec[i] * 3
}
vec <- c(3, 1, 4)
for (i in 1:3) {
print(vec[i] + 1)
}
for (i in seq_along(vec)) {
print(vec[i] * 3)
}
vec <- c(3, 1, 4)
vec2 <- rep(0, length(vec))
for (i in seq_along(vec)) {
vec2[i] <- vec[i] * 3
}
vec <- c(3, 1, 4)
vec2 <- rep(0, length(vec))
for (i in seq_along(vec)) {
vec2[i] <- vec[i] * 3
}
vec2
summ1 <- rep(1)
summ2 <- 0
for (i in 0:10) {
summ2[i + 1] <- summ1 * (1/2 ^ i)
}
sum(print(summ2))
summ1 <- rep(1)
summ2 <- 0
for (i in 0:10) {
summ2[i + 1] <- summ1 * (1/2 ^ i)
}
sum((summ2))
summ1 <- rep(1)
summ2 <- 0
for (i in 0:10) {
summ2[i + 1] <- summ1 * (1/2 ^ i)
}
print(summ2)
sum(summ2)
summ3 <- rep(1)
summ4 <- 0
for (i in 0:10) {
summ4[i + 1] <- summ3 * (1/9 ^ i)
}
print(summ4)
sum(summ4)
summ3 <- rep(1)
summ4 <- 0
for (i in 0:5) {
summ4[i + 1] <- summ3 * (1/9 ^ i)
}
print(summ4)
sum(summ4)
arith1 <- rep(3)
arith2 <- 0
for (i in 1:4) {
arith2[i] <- arith1 + (i - 1) * 3
}
print(arith2)
arith1 <- rep(3)
arith2 <- 0
for (i in 1:4) {
arith2[i] <- arith1 + (i - 1) * 3
}
print(arith2)
sum(arith2)
arith1 <- rep(3)
arith2 <- 0
for (i in 1:4) {
arith2[i] <- arith1 + (i - 1) * 2
}
print(arith2)
sum(arith2)
arith1 <- rep(3)
arith2 <- 0
for (i in 1:4) {
arith2[i] <- arith1 + (i - 1) * 3
}
print(arith2)
sum(arith2)
geo1 <- rep(3)
geo2 <- 0
for (i in 1:4) {
geo2[i] <- geo1 * 2 ^ (i - 1)
}
print(geo2)
sum(geo2)
sin1 <- rep(x)
sin2 <- 0
for (i in 1:10) {
sin2[i] <- sin1 + ((-1) ^ i) * (x ^ (2 * i - 1))
}
print(sin2)
sin1 <- rep('x')
sin2 <- 0
for (i in 1:10) {
sin2[i] <- sin1 + ((-1) ^ i) * (x ^ (2 * i - 1))
}
print(sin2)
sin1 <- x
sin2 <- 0
for (i in 1:10) {
sin2[i] <- sin1 + ((-1) ^ i) * (x ^ (2 * i - 1))
}
print(sin2)
sin1 <- (5)
sin2 <- 0
for (i in 1:10) {
sin2[i] <- sin1 + ((-1) ^ i) * (x ^ (2 * i - 1))
}
print(sin2)
sin1 <- (x)
sin2 <- 0
for (i in 1:10) {
sin2[i] <- sin1 + ((-1) ^ (i - 1)) * (x ^ (2 * i - 1)/((2 * i - 1)!)
}
print(sin2)
x <- 1
n <- 5
sign <- 1
power <- 1
final <- 0
for (i in 1:n) {
term <- sign * (x^power) / factorial(power)
power <- i + 2
sign <- -1 * sign
final <- final + term
print(final)
}
set.seed(123)
X <- matrix(rnorm(12), nrow = 4, ncol = 3)
X
set.seed(123)
X <- matrix(rnorm(12), nrow = 4, ncol = 3)
Y <- X
for (i in 1:nrow(X)) {
for (j in 1:ncol(X)) {
if (X[i,j] < 0) {
Y[i,j] <- X[i,j]^2
} else {
Y[i,j] <- sqrt(X[i,j])
}
}
}
Y
reduce <- function(x) {
while(x %% 2 == 0) {
x <- x / 2
}
return(x)
}
reduce(898128000)
x <- 1:100
summ <- 0
for (i in 1:length(x)) {
summ <- summ + x[i]
}
avg <- summ / length(x)
avg
x <- 1:100
summ <- 0
i <- 1
while(i <= length(x)) {
summ <- summ + x[i]
i <- i + 1
}
avg <- summ / length(x)
avg
x <- 1:100
summ <- 0
i <- 1
repeat {
summ <- summ + x[i]
i <- i + 1
if (i > length(x)) break
}
avg <- summ / length(x)
avg
x <- 1:100
deviation <- 0
for (i in 1:length(x)) {
deviation <- deviation + (x[i] - avg)^2
}
std_dev <- sqrt(deviation / length(x) - 1)
x <- 1:100
deviation <- 0
for (i in 1:length(x)) {
deviation <- deviation + (x[i] - avg)^2
}
std_dev <- sqrt(deviation / length(x) - 1)
std_dev
x <- 1:100
deviation <- 0
for (i in 1:length(x)) {
deviation <- deviation + (x[i] - avg)^2
}
std_dev <- sqrt(deviation / length(x) - 1)
std_dev
sd(x)
sd(x)
x <- 1:100
deviation <- 0
for (i in 1:length(x)) {
deviation <- deviation + (x[i] - avg)^2
}
std_dev <- sqrt(deviation / length(x) - 1)
std_dev
x <- 1:100
deviation <- 0
for (i in 1:length(x)) {
deviation <- deviation + (x[i] - avg)^2
}
std_dev <- sqrt(deviation / (length(x) - 1))
std_dev
?set.seed
install.packages('pryr')
abc <- function(x) {
mean(x)
}
rm(abc)
install.packages(testthat)
install.packages('testthat')
?rnorm
install.packages('testthat')
library(testthat)
source("functions.R")
getwd()
source("functions.R")
source("functions.R")
source('functions.R')
source('lab09/functions.R')
context("Test for range value")
test_that("range works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), 4)
expect_length(stat_range(x), 1)
expect_type(stat_range(x), 'double')
})
test_file('tests.R')
test_file('tests.R')
test_file('lab09/tests.R')
setwd('/Users/justinng/hw-stat133/hw04/code')
#1.1) Read Aarchive Data Table
library(XML)
library(stringr)
library(dplyr)
read_archive <- function(x) {
a <- 'http://cran.r-project.org/src/contrib/Archive/'
b <- x
c <- paste0(a, b)
d <- readHTMLTable(c)
tbl <- d[[1]]
tbl
}
raw_data <- read_archive('stringr')
raw_data
read_archive('dplyr')
typeof(raw_data)
#1.2) Data Cleaning
#' @title Version Names
#' @description Extracts the name of a package.
#' @param 'x' a character vector package
#' @return A list of the names of the packages for each version
version_names <- function(x) {
raw_data <- read_archive(x)
str_extract(raw_data$Name[-c(1, 2, length(raw_data$Name))], pattern = '[a-z]+')
}
version_names('stringr')
#' @title Version Dates
#' @description Extracts the version number of each version of a package.
#' @param 'x' a character vector package
#' @return A list of every version of the package
version_dates <- function(x) {
date_numbers <- read_archive(x)
str_extract(date_numbers$`Last modified`[-c(1, 2, length(date_numbers$`Last modified`))], pattern = '[0-9]{4}-[0-9]{2}-[0-9]{2}')
}
version_dates('stringr')
#' @title Version Sizes
#' @description Extracts the version sizes of each version of a package.
#' @param 'x' a character vector package
#' @return A list of the version size for every version of a package
version_sizes <- function(x) {
version_numbers <- read_archive(x)
str_extract(version_numbers$Size[-c(1, 2, length(version_numbers$Size))], pattern = '[0-9.]*K')
}
version_sizes('stringr')
#' @title Version Numbers
#' @description Extracts the version numbers of each version of a package.
#' @param 'x' a character vector package
#' @return A list of the version numbers for every version of a package.
version_numbers <- function(x) {
data_numbers <- read_archive(x)
str_extract(data_numbers$Name[-c(1, 2, length(data_numbers$Name))], pattern = '[0-9.]*\\.tar\\.gz')
}
version_numbers('stringr')
clean_archive <- function(x) {
y <- data.frame(name = version_names(x),
version = version_numbers(x),
date = version_dates(x),
size = version_sizes(x),
stringsAsFactors = FALSE
)
y
}
clean_data <- clean_archive('stringr')
sink('../data/stringr-archive.csv')
clean_data
sink()
1+2
library(ggplot2)
clean_data
#1.3) Timeline Plot
ggplot(data = clean_data$size) + geom_point(aes(x = x, y = y))
#1.3) Timeline Plot
class(clean_data$date)
class(clean_data$size)
#1.3) Timeline Plot
clean_data$date <- as.Date(clean_data$date)
class(clean_data$date)
clean_data$size <- as.double(clean_data$size)
class(clean_data$size)
clean_data$size
clean_data
clean_data <- clean_archive('stringr')
clean_data
#' @title Version Sizes
#' @description Extracts the version sizes of each version of a package.
#' @param 'x' a character vector package
#' @return A list of the version size for every version of a package
version_sizes <- function(x) {
version_numbers <- read_archive(x)
str_extract(version_numbers$Size[-c(1, 2, length(version_numbers$Size))], pattern = '[0-9.]*')
}
version_sizes('stringr')
clean_data <- clean_archive('stringr')
clean_data
ggplot(data = clean_data$size) + geom_point(aes(x = x, y = y))
#1.3) Timeline Plot
clean_data$date <- as.Date(clean_data$date)
ggplot(data = clean_data$size) + geom_point(aes(x = x, y = y))
clean_data$size <- as.double(clean_data$size)
ggplot(data = clean_data$size) + geom_point(aes(x = x, y = y))
ggplot(data = clean_data) + geom_point(aes(x = x, y = y))
ggplot(data = clean_data) + geom_point(aes(x = clean_data$date, y = clean_data$size))
ggplot(data = clean_data) + geom_point(aes(x = clean_data$date, y = clean_data$size))
ggplot(data = clean_data) + geom_point(aes(x = clean_data$date, y = clean_data$size))
ggplot(data = clean_data) + geom_point(aes(x = clean_data$date, y = clean_data$size))
ggplot(data = clean_data) + geom_step(aes(x = clean_data$date, y = clean_data$size))
ggplot(data = clean_data, xlab = 'Date', ylab = 'Size') + geom_step(aes(x = clean_data$date, y = clean_data$size))
ggplot(data = clean_data) + geom_step(aes(x = clean_data$date, y = clean_data$size)xlab = 'Date', ylab = 'Size')
ggplot(data = clean_data) + geom_step(aes(x = Date, y = clean_data$size))
ggplot(data = clean_data) + geom_step(aes(x = clean_data$date, y = clean_data$size))
clean_data_graph <- select(clean_data, c(3, 4))
clean_data_graph
ggplot(data = clean_data_graph) + geom_step(aes(x = Date, y = Size))
ggplot(data = clean_data_graph) + geom_step(aes(x = Date, y = Size))
ggplot(data = clean_data_graph) + geom_step(aes(x = 'Date', y = 'Size'))
ggplot(data = clean_data) + geom_step(aes(x = clean_data$date, y = clean_date$size))
ggplot(data = clean_data) + geom_step(aes(x = date, y = size))
ggplot(data = clean_data_graph) + geom_step(aes(x = date, y = size))
ggplot(data = clean_data_graph) + geom_step(aes(x = date, y = size))
ggplot(data = clean_data_graph) + geom_step(aes(x = date, y = size))
plot_archive <- function(x) {
a <- clean_archive(x)
b <- select(a, c(3, 4))
ggplot(data = b) + geom_step(aes(x = date, y = size))
}
plot_archive('stringr')
plot_archive <- function(x) {
a <- clean_archive(x)
b <- a$date <- as.Date(a$date)
c <- a$size <- as.double(a$size)
d <- select(a, c(3, 4))
ggplot(data = d) + geom_step(aes(x = date, y = size))
}
plot_archive('stringr')
plot_archive('dplyr')
rm(clean_data_graph)
plot_archive <- function(x) {
x
b <- x$date <- as.Date(x$date)
c <- x$size <- as.double(x$size)
d <- select(x, c(3, 4))
ggplot(data = d) + geom_step(aes(x = date, y = size))
}
plot_archive('stringr')
plot_archive('clean_data')
plot_archive <- function(x) {
x
b <- x$date <- as.Date(x$date)
c <- x$size <- as.double(x$size)
d <- select(x, c(3, 4))
ggplot(data = d) + geom_step(aes(x = date, y = size))
}
plot_archive('clean_data')
clean_data <- clean_archive('stringr')
clean_data
plot_archive <- function(x) {
b <- x$date <- as.Date(x$date)
c <- x$size <- as.double(x$size)
d <- select(x, c(3, 4))
ggplot(data = d) + geom_step(aes(x = date, y = size))
}
plot_archive('clean_data')
clean_data
#1.3) Timeline Plot
clean_data$date <- as.Date(clean_data$date)
clean_data$size <- as.double(clean_data$size)
plot_archive <- function(x) {
b <- x$date <- as.Date(x$date)
c <- x$size <- as.double(x$size)
d <- select(x, c(3, 4))
ggplot(data = d) + geom_step(aes(x = date, y = size))
}
plot_archive('clean_data')
clean_data <- clean_archive('stringr')
class(clean_data$date)
class(clean_data$size)
plot_archive <- function(x) {
b <- x$date <- as.Date(x$date)
c <- x$size <- as.double(x$size)
d <- select(x, c(3, 4))
ggplot(data = d) + geom_step(aes(x = date, y = size))
}
plot_archive(clean_data)
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
source('../code/archive-functions.R')
source('../code/archive-functions.R')
plot_archive(clean_data)
raw_data_group <- read_archive('dplyr', 'ggplot2', 'knitr', 'XML')
raw_data_group <- read_archive(c('dplyr', 'ggplot2', 'knitr', 'XML'))
library(XML)
library(stringr)
library(dplyr)
library(ggplot2)
raw_data_group <- read_archive(c('dplyr', 'ggplot2', 'knitr', 'XML'))
raw_data_group <- read_archive(c('dplyr', 'ggplot2', 'knitr', 'XML'))
raw_data_dplyr <- read_archive('dplyr')
raw_data_ggplot2 <- read_archive('ggplot2')
raw_data_knitr <- read_archive('knitr')
raw_data_XML <- read_archive('XML')
raw_data_dplyr
raw_data_ggplot2
raw_data_knitr
raw_data_XML
raw_data_group <- append(raw_data_dplyr, raw_data_ggplot2, raw_data_knitr, raw_data_XML)
clean_dplyr <- clean_archive('dplyr')
clean_dplyr
clean_ggplot2 <- read_archive('ggplot2')
clean_ggplot2 <- clean_archive('ggplot2')
clean_knitr <- read_archive('knitr')
clean_knitr <- clean_archive('knitr')
clean_XML <- clean_archive('XML')
clean_ggplot2
clean_knitr
clean_XML
clean_data_group <- append(clean_dplyr, clean_ggplot2, clean_knitr, clean_XML)
clean_XML <- clean_archive('XML')
clean_XML <- clean_archive('XML')
clean_data_group <- append(clean_dplyr, clean_ggplot2, clean_knitr, clean_XML)
sink('../data/dplyr-archive.csv')
sink('../data/ggplot2-archive.csv')
sink('../data/knitr-archive.csv')
sink('../data/XML-archive.csv')
sink('../data/stringr-archive.csv')
sink('../data/stringr-archive.csv')
clean_data
sink()
sink('../data/dplyr-archive.csv')
clean_dplyr
sink()
sink('../data/ggplot2-archive.csv')
clean_ggplot2
sink()
sink('../data/knitr-archive.csv')
clean_knitr
sink()
sink('../data/XML-archive.csv')
clean_XML
sink()
sink('../data/dplyr-archive.csv')
clean_dplyr
sink()
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
library(XML)
library(stringr)
library(dplyr)
library(ggplot2)
source('../code/archive-functions.R')
raw_data <- read_archive('stringr')
plot_archive(clean_data)
1+2
